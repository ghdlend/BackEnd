package testPackage;

class A {
    //클래스는 여러 개 생성할 수 있지만
    //main을 포함하는 클래스는 1개만 있어야 함
    //해당 클래스는 public으로 시작해야 함
}
//java프로그램은 파일명과 동일한 public 클래스를 찾고 내포된
//main()에서부터 실행 시작
public class test { //main을 담고 있는 클래스가 파일명
    //main이 없는 클래스들만 있으면 public 클래스는 파일에서
    //한개만 구성하고 public인 클래스를 파일명으로 사용
    //public은 접근 제한이 없음
    public static void main(String[] args){
        //자바 프로젝트 실행 시작 점
        //객체 생성하지 않고 main 함수 사용 가능하도록 static으로 구성
        // -> 객체 없이 바로 호출 가능
        //main 함수가 종료되면 프로그램 종료
        // -> 프로젝트에서 한 번만 표현됨
        //main 함수가 포함된 클래스는 public이어야 함
        //main 함수는 return이 없음 - void
        // String[] args : main을 가상머신이 호출할 때
        // ->전달되는 데이터가 args로 전달
        //매개변수 자바 변수이기 떄문에 변수의 type을 String[]로 결정
        System.out.println("테스트입니다");
         //자바 변수 : type을 표현해야 함
        int value = 10;
        //변수 선언 후 값에 대입
        int value1;
        value1 = 10;
        //변수에 값 대입
        int result = value1 + 10;
        System.out.println(result);

        
    }
}

public class Exmaple1 {
    //자바 변수 : type을 표현해야 함
    int value = 10;
    //변수 선언 후 값에 대입
    int value1;
    value1 = 10;
    //변수에 값 대입
    int result = value1 + 10;
    System.out.println(result);

    //자바 상수 : 실행 중 값 기억 임시 기억장소
    // -> 대입 후 실행 중 값이 변하지 않음
    //final 데이터타입 상수명
    //변수와 구분하기 위해 대문자로 명시
    //값 변경 불가
    final int PRICE = 1000;
    
    //리터럴 : 변수에 저장되는 값
    // 정수, 실수, 문자, 문자열, 논리 리터럴
    value = 50; //50은 정수형 리터럴
    float valf = 50.2f;
    char valch = 'a';
    String str = "abc";
    boolean a = true;
    
    //데이터 타입
    //기본 타입 : byte/short/int(기본)/long 	float/double(기본) boolean char
    //참조형 : 기본 타입 제외 나머지 모두 String
    
    int aint = 10; //기본값 0 4byte
    double bdouble = 5.2; // 0.0d 8byte
    char chr = 'A'; // '\'u000' 2byte
    boolean bool = false; //false 1byte
    
    long lint = 100L; //8byte
    float flt = 5.0f; //4byte
    short sint = 10; //2byte
    byte bint =1; //1byte
    
    //데이터 타입에 따라 사용 메모리 크기가 다름
    //메모리 최소단위 : bit -> 0/1 => 8개가 모여 1byte
    //bit : 2^1 표현 byte : 2 ^ 8 = 256 (0 ~ 255)
}
